import logging
import os
import re
from dataclasses import dataclass
from typing import Dict, Set

import psycopg2
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ParseMode, MessageEntityType
from aiogram.utils import executor
from aiogram.utils import markdown
from aiogram.utils.callback_data import CallbackData
from aiogram.utils.exceptions import MessageNotModified
from aiogram.utils.text_decorations import markdown_decoration

logging.basicConfig(
    format=u'%(filename)+13s [ LINE:%(lineno)-4s] %(levelname)-8s [%(asctime)s] %(message)s',
    level=logging.DEBUG
)

DATABASE_URL = os.environ['DATABASE_URL']

logging.info("Connection to DB...")
conn = psycopg2.connect(DATABASE_URL, sslmode='require')
logging.info("Successful database connection!")

with conn:
    with conn.cursor() as curs:
        curs.execute("SELECT version();")
        record = curs.fetchone()
        print("You are connected to - ", record, "\n")

conn.close()


@dataclass(unsafe_hash=True)
class StorageKey:
    chat_id: str
    group_name: str


@dataclass
class StorageValue:
    members: Set[str]


bot = Bot(token=os.getenv("TOKEN"))
dp = Dispatcher(bot=bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

group_cd = CallbackData('group', 'key', 'action')  # group:<id>:<action>
STORAGE: Dict[StorageKey, StorageValue] = dict()

REGEX_COMMAND_GROUP = re.compile(r'^/(?P<command>[\w-]+)\s+(?P<group>[\w-]+)$')
REGEX_COMMAND_GROUP_MEMBER = re.compile(r'^/(?P<command>[\w-]+)\s+(?P<group>[\w-]+)\s+(?P<member>[@\w-]+)$')


async def shutdown(dispatcher: Dispatcher):
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()


@dp.errors_handler(exception=MessageNotModified)
async def handler_message_not_modified(update, error):
    return True  # errors_handler must return True if error was handled correctly


@dp.message_handler(commands=['start', 'help'])
async def handler_help(message: types.Message):
    await message.reply(
        text=markdown.text(
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.get_mention()}! üëã",
            "",
            markdown_decoration.bold('–Ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –∫–æ–º–∞–Ω–¥—ã:'),
            markdown.escape_md('/list_groups ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø'),
            markdown.escape_md('/add_group ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã'),
            markdown.escape_md('/remove_group ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã'),
            markdown.escape_md('/list_members ‚Äî —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã'),
            markdown.escape_md('/add_member –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –≥—Ä—É–ø–ø—É'),
            markdown.escape_md('/remove_member ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã'),
            markdown.escape_md('/call ‚Äî –ø–æ–∑–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã'),
            markdown.escape_md('/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º –æ–ø–µ—Ä–∞—Ü–∏—è–º'),
            sep='\n'
        ),
        parse_mode=ParseMode.MARKDOWN
    )


@dp.message_handler(commands=['list_groups'])
async def handler_list_groups(message: types.Message):
    groups = sorted([x.group_name for x in STORAGE.keys() if x.chat_id == message.chat.id])
    groups = [f"- {x}" for x in groups]
    await message.reply(
        markdown.text(
            markdown_decoration.bold("–í—Å–µ –≥—Ä—É–ø–ø—ã:"),
            markdown_decoration.code(
                "\n".join(groups)
                if len(groups) != 0
                else "–Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã"
            ),
            sep='\n'
        ),
        parse_mode=ParseMode.MARKDOWN
    )


@dp.message_handler(commands=['add_group'])
async def handler_add_group(message: types.Message):
    match = REGEX_COMMAND_GROUP.search(message.text)
    if not match:
        return await message.reply(
            markdown.text(
                markdown_decoration.bold("–ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞:"),
                markdown_decoration.code("/add_group group"),
                sep='\n'
            ),
            parse_mode=ParseMode.MARKDOWN
        )
    group_key = match.group("group")
    key = StorageKey(chat_id=message.chat.id, group_name=group_key)
    if key in STORAGE:
        return await message.reply('–¢–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
    STORAGE[key] = StorageValue(members=set())
    await message.reply(
        markdown.text("–ì—Ä—É–ø–ø–∞", markdown_decoration.code(key.group_name), "–¥–æ–±–∞–≤–ª–µ–Ω–∞!"),
        parse_mode=ParseMode.MARKDOWN
    )


@dp.message_handler(commands=['remove_group'])
async def handler_remove_group(message: types.Message):
    match = REGEX_COMMAND_GROUP.search(message.text)
    if not match:
        return await message.reply(
            markdown.text(
                markdown_decoration.bold("–ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞:"),
                markdown_decoration.code("/remove_group group"),
                sep='\n'
            ),
            parse_mode=ParseMode.MARKDOWN
        )
    group_key = match.group("group")
    key = StorageKey(chat_id=message.chat.id, group_name=group_key)
    if key not in STORAGE:
        await message.reply('–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
    else:
        del STORAGE[key]
        await message.reply(
            markdown.text("–ì—Ä—É–ø–ø–∞", markdown_decoration.bold(key.group_name), "—É–¥–∞–ª–µ–Ω–∞!"),
            parse_mode=ParseMode.MARKDOWN
        )


@dp.message_handler(commands=['list_members'])
async def handler_list_members(message: types.Message):
    match = REGEX_COMMAND_GROUP.search(message.text)
    if not match:
        return await message.reply(
            markdown.text(
                markdown_decoration.bold("–ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞:"),
                markdown_decoration.code("/list_members group"),
                sep='\n'
            ),
            parse_mode=ParseMode.MARKDOWN
        )
    group_key = match.group("group")
    key = StorageKey(chat_id=message.chat.id, group_name=group_key)
    if key not in STORAGE:
        await message.reply('–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
    members = [f"- {x}" for x in sorted(STORAGE[key].members)]
    await message.reply(
        markdown.text(
            markdown.text(
                markdown_decoration.bold("–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã"),
                markdown_decoration.code(group_key)
            ),
            markdown_decoration.code(
                "\n".join(members)
                if len(members) != 0
                else "–Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"
            ),
            sep='\n'
        ),
        parse_mode=ParseMode.MARKDOWN
    )


@dp.message_handler(commands=['add_member'])
async def handler_add_member(message: types.Message):
    match = REGEX_COMMAND_GROUP_MEMBER.search(message.text)
    if not match:
        return await message.reply(
            markdown.text(
                markdown_decoration.bold("–ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞:"),
                markdown_decoration.code("/add_member group username"),
                sep='\n'
            ),
            parse_mode=ParseMode.MARKDOWN
        )
    group_key = match.group('group')
    key = StorageKey(chat_id=message.chat.id, group_name=group_key)
    if key not in STORAGE:
        await message.reply('–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
    members = STORAGE[key].members
    mentions = [
        x.get_text(message.text)
        for x in message.entities
        if x.type == MessageEntityType.MENTION
    ]
    text_mentions = [
        markdown_decoration.link(value=x.user.full_name, link=x.user.url)
        for x in message.entities
        if x.type == MessageEntityType.TEXT_MENTION
    ]
    all_members = mentions + text_mentions
    if not all_members:
        return await message.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!')
    if len(all_members) != 1:
        return await message.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω!')
    members.update(all_members)
    await message.reply(
        markdown.text(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É",
            markdown_decoration.code(group_key)
        ),
        parse_mode=ParseMode.MARKDOWN
    )


@dp.message_handler(commands=['remove_member'])
async def handler_remove_member(message: types.Message):
    match = REGEX_COMMAND_GROUP_MEMBER.search(message.text)
    if not match:
        return await message.reply(
            markdown.text(
                markdown_decoration.bold("–ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞:"),
                markdown_decoration.code("/remove_member group username"),
                sep='\n'
            ),
            parse_mode=ParseMode.MARKDOWN
        )
    group_key = match.group('group')
    key = StorageKey(chat_id=message.chat.id, group_name=group_key)
    if key not in STORAGE:
        await message.reply('–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
    mentions = [
        x.get_text(message.text)
        for x in message.entities
        if x.type == MessageEntityType.MENTION
    ]
    text_mentions = [
        f"[{x.user.full_name}]({x.user.url})"
        for x in message.entities
        if x.type == MessageEntityType.TEXT_MENTION
    ]
    all_members = mentions + text_mentions
    if not all_members:
        return await message.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!')
    if len(all_members) != 1:
        return await message.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω!')
    STORAGE[key].members.remove(all_members.pop())
    await message.reply(
        markdown.text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã", markdown_decoration.code(group_key)),
        parse_mode=ParseMode.MARKDOWN
    )


@dp.message_handler(commands=['call'])
async def handler_call(message: types.Message):
    match = REGEX_COMMAND_GROUP.search(message.text)
    if not match:
        return await message.reply(
            markdown.text(
                markdown_decoration.bold("–ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞:"),
                markdown_decoration.code("/call group"),
                sep='\n'
            ),
            parse_mode=ParseMode.MARKDOWN
        )
    group_key = match.group("group")
    key = StorageKey(chat_id=message.chat.id, group_name=group_key)
    if key not in STORAGE:
        return await message.reply('–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
    members = STORAGE[key].members
    if not members:
        return await message.reply('–ì—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–∞!')
    members = [markdown.escape_md(x) for x in members]
    text = markdown.text(
        " ".join(members) if len(members) != 0 else "–Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞",
        sep='\n'
    )
    if message.reply_to_message:
        await message.reply_to_message.reply(text, parse_mode=ParseMode.MARKDOWN)
    else:
        await message.reply(text, parse_mode=ParseMode.MARKDOWN)


if __name__ == '__main__':
    executor.start_polling(dp, on_shutdown=shutdown)
